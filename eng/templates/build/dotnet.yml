parameters:
    - name: projects
      type: object

    - name: cacheEnable
      type: boolean
      default: true

    - name: testProjects
      type: object
      default: ''

    - name: testEnable
      type: boolean
      default: true

    - name: testGatherCodeCoverage
      type: boolean
      default: false

    - name: publishEnable
      type: boolean
      default: true

    - name: publishArtifactEnable
      type: boolean
      default: true

    - name: publishArtifactName
      type: string
      default: 'publish'

    - name: restoreUseCustomRegistry
      type: boolean
      default: false

    - name: restoreCustomRegistryUrl
      type: string
      default: ''

    - name: vulnerabilityCheckEnable
      type: boolean
      default: false

steps:
    - ${{ if eq(parameters.cacheEnable, true) }}:
          - task: Cache@2
            displayName: Cache
            inputs:
                key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
                restoreKeys: |
                    nuget | "$(Agent.OS)"
                    nuget
                path: $(Pipeline.Workspace)/.nuget/packages
                cacheHitVar: 'CACHE_RESTORED'

    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
          packageType: 'sdk'
          useGlobalJson: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      env:
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
      inputs:
          command: 'restore'
          projects: ${{ parameters.projects }}
              ${{ parameters.testProjects }}
          ${{ if parameters.restoreUseCustomRegistry }}:
              feedsToUse: select
              vstsFeed: ${{ parameters.restoreCustomRegistryUrl }}

    - script: dotnet tool restore
      displayName: 'Restore .NET tools'
      env:
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

    - task: DotNetCoreCLI@2
      displayName: 'Build Projects'
      inputs:
          command: 'build'
          projects: ${{ parameters.projects }}
          arguments: '-c Release --no-restore'

    - ${{ if eq(parameters.vulnerabilityCheckEnable, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Check for Vulnerable Packages'
            inputs:
                command: 'custom'
                arguments: 'list package --vulnerable'

    - ${{ if and(eq(parameters.testEnable, true), ne(parameters.testProjects, '')) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
                command: 'test'
                projects: ${{ parameters.testProjects }}
                arguments: '--logger trx --results-directory $(Build.ArtifactStagingDirectory)/TestResults'
                publishTestResults: true
                testRunTitle: 'Unit Tests'
                nobuild: true
                configuration: Release

          - task: DotNetCoreCLI@2
            displayName: 'Run Integration Tests'
            inputs:
                command: 'test'
                projects: ${{ parameters.testProjects }}
                arguments: '--filter "TestCategory=Integration" --logger trx --results-directory $(Build.ArtifactStagingDirectory)/TestResults'
                publishTestResults: true
                testRunTitle: 'Integration Tests'
                nobuild: true
                configuration: Release

    - ${{ if eq(parameters.publishEnable, true) }}:
          - task: DotNetCoreCLI@2
            displayName: 'Publish Projects'
            inputs:
                command: 'publish'
                projects: ${{ parameters.projects }}
                arguments: '--output $(Build.ArtifactStagingDirectory)/${{ parameters.publishArtifactName }}'
                zipAfterPublish: false
                nobuild: true
                configuration: Release

          - ${{ if eq(parameters.publishArtifactEnable, true) }}:
                - publish: $(Build.ArtifactStagingDirectory)/${{ parameters.publishArtifactName }}
                  artifact: ${{ parameters.publishArtifactName }}
                  displayName: 'Publish Artifact'
