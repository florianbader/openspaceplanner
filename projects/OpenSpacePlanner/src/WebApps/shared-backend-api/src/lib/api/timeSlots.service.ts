/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient,
    HttpHeaders,
    HttpParams,
    HttpResponse,
    HttpEvent,
    HttpParameterCodec,
    HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { CreateTimeSlotCommand } from '../model/createTimeSlotCommand';
// @ts-ignore
import { TimeSlot } from '../model/timeSlot';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
    providedIn: 'root',
})
export class TimeSlotsService {
    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string | string[],
        @Optional() configuration: Configuration,
    ) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath)
                ? basePath[0]
                : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder =
            this.configuration.encoder || new CustomHttpParameterCodec();
    }

    // @ts-ignore
    private addToHttpParams(
        httpParams: HttpParams,
        value: any,
        key?: string,
    ): HttpParams {
        if (typeof value === 'object' && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(
        httpParams: HttpParams,
        value?: any,
        key?: string,
    ): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                (value as any[]).forEach(
                    (elem) =>
                        (httpParams = this.addToHttpParamsRecursive(
                            httpParams,
                            elem,
                            key,
                        )),
                );
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(
                        key,
                        (value as Date).toISOString().substring(0, 10),
                    );
                } else {
                    throw Error('key may not be null if value is Date');
                }
            } else {
                Object.keys(value).forEach(
                    (k) =>
                        (httpParams = this.addToHttpParamsRecursive(
                            httpParams,
                            value[k],
                            key != null ? `${key}.${k}` : k,
                        )),
                );
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error('key may not be null if value is not object or array');
        }
        return httpParams;
    }

    /**
     * Creates a new time slots item.
     * @param tenant
     * @param sessionId The session id.
     * @param createTimeSlotCommand The new time slot.
     * @param apiVersion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTimeSlot(
        tenant: string,
        sessionId: string,
        createTimeSlotCommand: CreateTimeSlotCommand,
        apiVersion?: string,
        observe?: 'body',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<TimeSlot>;
    public createTimeSlot(
        tenant: string,
        sessionId: string,
        createTimeSlotCommand: CreateTimeSlotCommand,
        apiVersion?: string,
        observe?: 'response',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpResponse<TimeSlot>>;
    public createTimeSlot(
        tenant: string,
        sessionId: string,
        createTimeSlotCommand: CreateTimeSlotCommand,
        apiVersion?: string,
        observe?: 'events',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpEvent<TimeSlot>>;
    public createTimeSlot(
        tenant: string,
        sessionId: string,
        createTimeSlotCommand: CreateTimeSlotCommand,
        apiVersion?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<any> {
        if (tenant === null || tenant === undefined) {
            throw new Error(
                'Required parameter tenant was null or undefined when calling createTimeSlot.',
            );
        }
        if (sessionId === null || sessionId === undefined) {
            throw new Error(
                'Required parameter sessionId was null or undefined when calling createTimeSlot.',
            );
        }
        if (
            createTimeSlotCommand === null ||
            createTimeSlotCommand === undefined
        ) {
            throw new Error(
                'Required parameter createTimeSlotCommand was null or undefined when calling createTimeSlot.',
            );
        }

        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
        if (apiVersion !== undefined && apiVersion !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>apiVersion,
                'api-version',
            );
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined =
            options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = ['application/json'];
            localVarHttpHeaderAcceptSelected =
                this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set(
                'Accept',
                localVarHttpHeaderAcceptSelected,
            );
        }

        let localVarHttpContext: HttpContext | undefined =
            options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined =
            options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined =
            this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set(
                'Content-Type',
                httpContentTypeSelected,
            );
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (
                this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
            ) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/${this.configuration.encodeParam({ name: 'tenant', value: tenant, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/api/sessions/${this.configuration.encodeParam({ name: 'sessionId', value: sessionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/timeslots`;
        return this.httpClient.request<TimeSlot>(
            'post',
            `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: createTimeSlotCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress,
            },
        );
    }

    /**
     * Deletes the specific to do item.
     * @param tenant
     * @param sessionId The id of the session.
     * @param id The id of the to do item.
     * @param apiVersion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        apiVersion?: string,
        observe?: 'body',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: undefined;
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<any>;
    public deleteTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        apiVersion?: string,
        observe?: 'response',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: undefined;
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpResponse<any>>;
    public deleteTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        apiVersion?: string,
        observe?: 'events',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: undefined;
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpEvent<any>>;
    public deleteTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        apiVersion?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {
            httpHeaderAccept?: undefined;
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<any> {
        if (tenant === null || tenant === undefined) {
            throw new Error(
                'Required parameter tenant was null or undefined when calling deleteTimeSlot.',
            );
        }
        if (sessionId === null || sessionId === undefined) {
            throw new Error(
                'Required parameter sessionId was null or undefined when calling deleteTimeSlot.',
            );
        }
        if (id === null || id === undefined) {
            throw new Error(
                'Required parameter id was null or undefined when calling deleteTimeSlot.',
            );
        }

        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
        if (apiVersion !== undefined && apiVersion !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>apiVersion,
                'api-version',
            );
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined =
            options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [];
            localVarHttpHeaderAcceptSelected =
                this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set(
                'Accept',
                localVarHttpHeaderAcceptSelected,
            );
        }

        let localVarHttpContext: HttpContext | undefined =
            options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined =
            options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (
                this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
            ) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/${this.configuration.encodeParam({ name: 'tenant', value: tenant, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/api/sessions/${this.configuration.encodeParam({ name: 'sessionId', value: sessionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/timeslots/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
        return this.httpClient.request<any>(
            'delete',
            `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress,
            },
        );
    }

    /**
     * Updates the specific time slot.
     * @param tenant
     * @param sessionId The id of the session.
     * @param id The id of the time slot.
     * @param timeSlot The new time slot.
     * @param apiVersion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        timeSlot: TimeSlot,
        apiVersion?: string,
        observe?: 'body',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<TimeSlot>;
    public updateTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        timeSlot: TimeSlot,
        apiVersion?: string,
        observe?: 'response',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpResponse<TimeSlot>>;
    public updateTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        timeSlot: TimeSlot,
        apiVersion?: string,
        observe?: 'events',
        reportProgress?: boolean,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<HttpEvent<TimeSlot>>;
    public updateTimeSlot(
        tenant: string,
        sessionId: string,
        id: string,
        timeSlot: TimeSlot,
        apiVersion?: string,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: {
            httpHeaderAccept?: 'application/json';
            context?: HttpContext;
            transferCache?: boolean;
        },
    ): Observable<any> {
        if (tenant === null || tenant === undefined) {
            throw new Error(
                'Required parameter tenant was null or undefined when calling updateTimeSlot.',
            );
        }
        if (sessionId === null || sessionId === undefined) {
            throw new Error(
                'Required parameter sessionId was null or undefined when calling updateTimeSlot.',
            );
        }
        if (id === null || id === undefined) {
            throw new Error(
                'Required parameter id was null or undefined when calling updateTimeSlot.',
            );
        }
        if (timeSlot === null || timeSlot === undefined) {
            throw new Error(
                'Required parameter timeSlot was null or undefined when calling updateTimeSlot.',
            );
        }

        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
        if (apiVersion !== undefined && apiVersion !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>apiVersion,
                'api-version',
            );
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined =
            options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = ['application/json'];
            localVarHttpHeaderAcceptSelected =
                this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set(
                'Accept',
                localVarHttpHeaderAcceptSelected,
            );
        }

        let localVarHttpContext: HttpContext | undefined =
            options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined =
            options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined =
            this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set(
                'Content-Type',
                httpContentTypeSelected,
            );
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (
                this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
            ) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/${this.configuration.encodeParam({ name: 'tenant', value: tenant, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/api/sessions/${this.configuration.encodeParam({ name: 'sessionId', value: sessionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}/timeslots/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: 'uuid' })}`;
        return this.httpClient.request<TimeSlot>(
            'put',
            `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: timeSlot,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress,
            },
        );
    }
}
